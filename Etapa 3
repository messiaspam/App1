activity_main.xml

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">


    <TextView
        android:id="@+id/distanceTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Distance: 0.00 km"
        android:layout_centerInParent="true"
        android:textSize="18sp" />


    <Button
        android:id="@+id/startButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Start Tracking"
        android:layout_below="@id/distanceTextView"
        android:layout_centerHorizontal="true" />


    <Button
        android:id="@+id/stopButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Stop Tracking"
        android:layout_below="@id/startButton"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="16dp"
        android:enabled="false" />


</RelativeLayout>


MainActivity.java

import android.Manifest;
import android.content.pm.PackageManager;
import android.location.Location;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import java.text.DecimalFormat;


public class MainActivity extends AppCompatActivity {


    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;


    private TextView distanceTextView;
    private Button startButton;
    private Button stopButton;


    private FusedLocationProviderClient fusedLocationClient;
    private LocationCallback locationCallback;
    private LocationRequest locationRequest;
    private Location lastLocation;
    private boolean isTracking = false;
    private double totalDistance = 0.0;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        distanceTextView = findViewById(R.id.distanceTextView);
        startButton = findViewById(R.id.startButton);
        stopButton = findViewById(R.id.stopButton);


        fusedLocationClient = new FusedLocationProviderClient(this);


        locationRequest = new LocationRequest();
        locationRequest.setInterval(10000);
        locationRequest.setFastestInterval(5000);
        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);


        locationCallback = new LocationCallback() {
            @Override
            public void onLocationResult(LocationResult locationResult) {
                super.onLocationResult(locationResult);
                if (locationResult != null && isTracking) {
                    Location newLocation = locationResult.getLastLocation();
                    if (lastLocation != null) {
                        totalDistance += lastLocation.distanceTo(newLocation) / 1000.0; // Convert to kilometers
                        updateDistanceText(totalDistance);
                    }
                    lastLocation = newLocation;
                }
            }
        };


        startButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startTracking();
            }
        });


        stopButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                stopTracking();
            }
        });


        if (checkLocationPermission()) {
            startButton.setEnabled(true);
        }
    }


    private void startTracking() {
        isTracking = true;
        totalDistance = 0.0;
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, null);
    }


    private void stopTracking() {
        isTracking = false;
        startButton.setEnabled(true);
        stopButton.setEnabled(false);
        fusedLocationClient.removeLocationUpdates(locationCallback);
    }


    private boolean checkLocationPermission() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                    LOCATION_PERMISSION_REQUEST_CODE);
            return false;
        }
        return true;
    }


    private void updateDistanceText(double distance) {
        DecimalFormat df = new DecimalFormat("#.##");
        distanceTextView.setText("Distance: " + df.format(distance) + " km");
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                startButton.setEnabled(true);
            } else {
                Toast.makeText(this, "Location permission denied.", Toast.LENGTH_SHORT).show();
            }
        }
    }
}

Colors

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="red">#FF0000</color>
</resources>
